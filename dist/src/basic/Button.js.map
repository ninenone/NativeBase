{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","variable","buttonDefaultBorderWidth","undefined","borderRadius","rounded","borderRadiusLarge","buttonDefaultBorderRadius","defaultProps","style","getInitialStyle","Array","isArray","flattenedStyle","reduce","accumulator","currentValue","concat","variables","context","theme","children","Platform","OS","React","Children","map","child","type","Text","cloneElement","uppercase","buttonUppercaseAndroidText","androidRipple","Version","prepareRootProps","_root","c","activeOpacity","buttonDefaultActiveOpacity","buttonStyle","buttonFlex","full","block","buttonDefaultFlex","flex","maxHeight","height","paddingTop","paddingBottom","TouchableNativeFeedback","Ripple","androidRippleColor","styles","childContainer","flexGrow","onPress","transparent","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","StyleSheet","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["/* eslint-disable new-cap */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback,\n  StyleSheet\n} from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport variable from '../theme/variables/platform';\nimport computeProps from '../utils/computeProps';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nimport { Text } from './Text';\n\nclass Button extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered\n          ? variable.buttonDefaultBorderWidth\n          : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variable.borderRadiusLarge\n            : variable.buttonDefaultBorderRadius\n      }\n    };\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn\n    };\n\n    if (Array.isArray(this.props.style)) {\n      const flattenedStyle = this.props.style.reduce(\n        (accumulator, currentValue) => accumulator.concat(currentValue),\n        []\n      );\n      return computeProps(\n        { ...this.props, style: flattenedStyle },\n        defaultProps\n      );\n    }\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const children =\n      Platform.OS === 'ios'\n        ? this.props.children\n        : React.Children.map(this.props.children, child =>\n            child && child.type === Text\n              ? React.cloneElement(child, {\n                uppercase: variables.buttonUppercaseAndroidText,\n                ...child.props\n              })\n              : child\n          );\n    if (\n      Platform.OS === 'ios' ||\n      Platform.OS === 'web' ||\n      variables.androidRipple === false ||\n      Platform.Version < 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => (this._root = c)}\n          activeOpacity={\n            this.props.activeOpacity > 0\n              ? this.props.activeOpacity\n              : variable.buttonDefaultActiveOpacity\n          }\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    }\n    if (this.props.rounded) {\n      const buttonStyle = { ...this.prepareRootProps().style };\n      const buttonFlex =\n        this.props.full || this.props.block\n          ? variable.buttonDefaultFlex\n          : buttonStyle.flex;\n      return (\n        <View\n          style={[\n            { maxHeight: buttonStyle.height },\n            buttonStyle,\n            { paddingTop: undefined, paddingBottom: undefined }\n          ]}\n        >\n          <TouchableNativeFeedback\n            ref={c => (this._root = c)}\n            background={TouchableNativeFeedback.Ripple(\n              this.props.androidRippleColor || variables.androidRippleColor,\n              true\n            )}\n            {...this.prepareRootProps()}\n          >\n            <View\n              style={[\n                // eslint-disable-next-line no-use-before-define\n                styles.childContainer,\n                {\n                  paddingTop: buttonStyle.paddingTop,\n                  paddingBottom: buttonStyle.paddingBottom,\n                  height: buttonStyle.height,\n                  flexGrow: buttonFlex\n                }\n              ]}\n            >\n              {children}\n            </View>\n          </TouchableNativeFeedback>\n        </View>\n      );\n    }\n    return (\n      <TouchableNativeFeedback\n        ref={c => (this._root = c)}\n        onPress={this.props.onPress}\n        background={\n          this.props.transparent\n            ? TouchableNativeFeedback.Ripple('transparent')\n            : TouchableNativeFeedback.Ripple(\n                variables.androidRippleColor,\n                false\n              )\n        }\n        {...this.prepareRootProps()}\n      >\n        <View {...this.prepareRootProps()}>{children}</View>\n      </TouchableNativeFeedback>\n    );\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool\n};\n\nconst styles = StyleSheet.create({\n  childContainer: {\n    flexShrink: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst StyledButton = connectStyle(\n  'NativeBase.Button',\n  {},\n  mapPropsToStyleNames\n)(Button);\nexport { StyledButton as Button };\n"]}