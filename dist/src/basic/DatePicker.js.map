{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","showDatePicker","Platform","OS","openAndroidDatePicker","setState","modalVisible","state","defaultDate","Date","chosenDate","placeHolderText","undefined","date","onDateChange","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","formatChosenDate","getDate","getMonth","getFullYear","join","variables","context","theme","variable","disabled","padding","color","datePickerTextColor","textStyle","placeHolderTextStyle","animationType","modalTransparent","backgroundColor","datePickerBg","flex","setDate","locale","timeZoneOffsetInMinutes","React","Component","defaultProps"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from 'react-native';\n\nimport variable from '../theme/variables/platform';\n\nimport { Text } from './Text';\n\nexport class DatePicker extends React.Component {\n  static defaultProps = {\n    disabled: false\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate:\n        !props.placeHolderText && props.defaultDate\n          ? props.defaultDate\n          : undefined\n    };\n  }\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker = () => {\n    if (Platform.OS === 'android') {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  };\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === 'dateSetAction') {\n        const selectedDate = new Date(year, month, day);\n        this.setState({ chosenDate: selectedDate });\n        this.props.onDateChange(selectedDate);\n      }\n    } catch ({ code, message }) {\n      console.warn('Cannot open date picker', message);\n    }\n  }\n\n  formatChosenDate(date) {\n    if (this.props.formatChosenDate) {\n      return this.props.formatChosenDate(date);\n    }\n    return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={() =>\n              !this.props.disabled ? this.showDatePicker() : undefined\n            }\n            style={[\n              { padding: 10, color: variables.datePickerTextColor },\n              this.state.chosenDate\n                ? this.props.textStyle\n                : this.props.placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.formatChosenDate(this.state.chosenDate)\n              : this.props.placeHolderText\n              ? this.props.placeHolderText\n              : 'Select Date'}\n          </Text>\n          <View>\n            <Modal\n              supportedOrientations={['portrait', 'landscape']}\n              animationType={this.props.animationType}\n              transparent={this.props.modalTransparent} // from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{ backgroundColor: variables.datePickerBg, flex: 1 }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={date => this.setDate(date)}\n                minimumDate={this.props.minimumDate}\n                maximumDate={this.props.maximumDate}\n                mode=\"date\"\n                locale={this.props.locale}\n                timeZoneOffsetInMinutes={this.props.timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]}